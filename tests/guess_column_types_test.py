#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Simple Test Demo for Column Type Guessing Function
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô guess_column_types() ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
"""

import pandas as pd
import numpy as np
import re
import os
import sys
import tempfile
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import functions
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from functions.guess_column_types import guess_column_types

# ===== Test Cases =====

def test_case_1_basic_type_detection():
    """Test Case 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("\n" + "="*60)
    print("üß™ Test Case 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
    print("="*60)
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
    test_data = pd.DataFrame({
        'integer_col': [1, 2, 3, 4, 5],
        'float_col': [1.1, 2.2, 3.3, 4.4, 5.5],
        'string_col': ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry'],
        'boolean_col': [True, False, True, False, True],
        'mixed_col': [1, 'text', 3.14, True, None]
    })
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_file:
        test_data.to_csv(temp_file.name, index=False)
        temp_file_path = temp_file.name
    
    print(f"üìä Input Data:")
    print(f"   Total columns: {len(test_data.columns)}")
    print(f"   Column types: integer, float, string, boolean, mixed")
    print(f"   Expected output: detect all 5 columns with appropriate types")
    
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        success, result = guess_column_types(temp_file_path)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if success:
            detected_columns = list(result.keys())
            expected_columns = list(test_data.columns)
            
            print(f"\nüìã Test Results:")
            print(f"   Success: {success}")
            print(f"   Detected columns: {len(detected_columns)}")
            print(f"   Expected columns: {len(expected_columns)}")
            print(f"   Column types detected:")
            for col, dtype in result.items():
                print(f"     - {col}: {dtype}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            if set(detected_columns) == set(expected_columns):
                print("   ‚úÖ PASS: Basic type detection works correctly")
                return True
            else:
                print("   ‚ùå FAIL: Column detection mismatch")
                return False
        else:
            print(f"\nüìã Test Results:")
            print(f"   Success: {success}")
            print(f"   Error: {result}")
            print("   ‚ùå FAIL: Function returned error")
            return False
            
    except Exception as e:
        print(f"\nüìã Test Results:")
        print(f"   ‚ùå FAIL: Exception occurred: {str(e)}")
        return False
        
    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        if os.path.exists(temp_file_path):
            os.unlink(temp_file_path)

def test_case_2_date_datetime_detection():
    """Test Case 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤"""
    print("\n" + "="*60)
    print("üß™ Test Case 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤")
    print("="*60)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    test_data = pd.DataFrame({
        'date_col': ['2023-01-15', '2023-02-20', '2023-03-25'],  # ‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 'date'
        'datetime_col': ['2023-01-15 14:30:45', '2023-02-20 09:15:30', '2023-03-25 18:45:00'],  # ‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 'datetime64'
        'regular_string': ['hello', 'world', 'test'],  # ‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô string type
        'mixed_dates': ['2023-01-15', 'not_a_date', '2023-03-25']  # ‚úÖ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô mixed/string
    })
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_file:
        test_data.to_csv(temp_file.name, index=False)
        temp_file_path = temp_file.name
    
    print(f"üìä Input Data (Date/DateTime Cases):")
    for col in test_data.columns:
        sample_value = test_data[col].iloc[0]
        print(f"   {col}: {sample_value} (sample)")
    print(f"   Expected output: date_col='date', datetime_col='datetime64'")
    
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        success, result = guess_column_types(temp_file_path)
        
        if success:
            date_type = result.get('date_col')
            datetime_type = result.get('datetime_col')
            
            print(f"\nüìã Test Results:")
            print(f"   Success: {success}")
            print(f"   date_col detected as: {date_type}")
            print(f"   datetime_col detected as: {datetime_type}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            date_correct = date_type == 'date'
            datetime_correct = datetime_type == 'datetime64'
            
            if date_correct and datetime_correct:
                print("   ‚úÖ PASS: Date and datetime detection works correctly")
                return True
            else:
                print("   ‚ùå FAIL: Date/datetime detection failed")
                print(f"     date_col: expected 'date', got '{date_type}'")
                print(f"     datetime_col: expected 'datetime64', got '{datetime_type}'")
                return False
        else:
            print(f"\nüìã Test Results:")
            print(f"   Success: {success}")
            print(f"   Error: {result}")
            print("   ‚ùå FAIL: Function returned error")
            return False
            
    except Exception as e:
        print(f"\nüìã Test Results:")
        print(f"   ‚ùå FAIL: Exception occurred: {str(e)}")
        return False
        
    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        if os.path.exists(temp_file_path):
            os.unlink(temp_file_path)

def test_case_3_different_delimiters():
    """Test Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô"""
    print("\n" + "="*60)
    print("üß™ Test Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô")
    print("="*60)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö delimiter ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    test_data = pd.DataFrame({
        'name': ['Alice', 'Bob', 'Charlie'],
        'age': [25, 30, 35],
        'salary': [50000.5, 60000.0, 70000.75]
    })
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö delimiters ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    delimiters_to_test = [
        (',', 'comma'),
        (';', 'semicolon'),
        ('\t', 'tab'),
        ('|', 'pipe')
    ]
    
    print(f"üìä Input Data (Delimiter Format):")
    print(f"   Testing with: comma, semicolon, tab, pipe")
    print(f"   Data: name, age, salary columns")
    print(f"   Expected output: successfully parse all 4 delimiter types")
    
    successful_delimiters = 0
    
    for delimiter, name in delimiters_to_test:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ delimiter ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_file:
            test_data.to_csv(temp_file.name, index=False, sep=delimiter)
            temp_file_path = temp_file.name
        
        try:
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ delimiter ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            success, result = guess_column_types(temp_file_path, delimiter=delimiter)
            
            if success and len(result) == 3:  # ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                successful_delimiters += 1
                
        except Exception:
            pass  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≤‡∏¢
            
        finally:
            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
    
    print(f"\nüìã Test Results:")
    print(f"   Successful delimiters: {successful_delimiters}/4")
    print(f"   Tested: comma, semicolon, tab, pipe")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    if successful_delimiters >= 3:  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ 1 delimiter ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        print("   ‚úÖ PASS: Different delimiters work correctly")
        return True
    else:
        print("   ‚ùå FAIL: Too many delimiter failures")
        return False

def test_case_4_edge_cases():
    """Test Case 4: Edge Cases"""
    print("\n" + "="*60)
    print("üß™ Test Case 4: Edge Cases")
    print("="*60)
    
    # Test 4a: ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    print("\nüîç Test 4a: ‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà")
    non_existent_file = 'this_file_does_not_exist_12345.csv'
    
    print(f"   Input: Non-existent file path")
    print(f"   Expected output: Return (False, error_message)")
    
    success, result = guess_column_types(non_existent_file)
    
    print(f"   Actual output: success={success}")
    test_4a_pass = not success and isinstance(result, str)
    print(f"   {'‚úÖ PASS' if test_4a_pass else '‚ùå FAIL'}: Non-existent file handling")
    
    # Test 4b: ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á
    print("\nüîç Test 4b: ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á")
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_file:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á
        temp_file.write("")
        empty_file_path = temp_file.name
    
    print(f"   Input: Empty CSV file")
    print(f"   Expected output: Handle gracefully (success or controlled failure)")
    
    try:
        success, result = guess_column_types(empty_file_path)
        
        print(f"   Actual output: success={success}")
        test_4b_pass = True  # ‡∏ó‡∏±‡πâ‡∏á success ‡∏´‡∏£‡∏∑‡∏≠ failure ‡∏Å‡πá‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á
        print(f"   {'‚úÖ PASS' if test_4b_pass else '‚ùå FAIL'}: Empty file handling")
        
    except Exception as e:
        print(f"   Actual output: Exception - {str(e)}")
        test_4b_pass = False
        print(f"   {'‚úÖ PASS' if test_4b_pass else '‚ùå FAIL'}: Empty file handling")
        
    finally:
        if os.path.exists(empty_file_path):
            os.unlink(empty_file_path)
    
    return test_4a_pass and test_4b_pass

def run_all_tests():
    """‡∏£‡∏±‡∏ô Test Cases ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üöÄ Starting Column Type Guessing Function Tests")
    print("Target: guess_column_types() - ‡πÄ‡∏î‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV")
    
    results = []
    
    # ‡∏£‡∏±‡∏ô test cases
    results.append(test_case_1_basic_type_detection())
    results.append(test_case_2_date_datetime_detection()) 
    results.append(test_case_3_different_delimiters())
    results.append(test_case_4_edge_cases())
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "="*60)
    print("üìä SUMMARY RESULTS")
    print("="*60)
    
    test_names = [
        "Test Case 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
        "Test Case 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤", 
        "Test Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô",
        "Test Case 4: Edge Cases"
    ]
    
    passed = 0
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{i+1}. {name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Overall Result: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("üéâ ALL TESTS PASSED! ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° spec")
    else:
        print("‚ö†Ô∏è  SOME TESTS FAILED! ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô")
    
    return passed == len(results)

if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô tests
    success = run_all_tests()
    
    print(f"\n{'='*60}")
    print("üîö Test Execution Complete")
    print(f"{'='*60}")
    
    exit(0 if success else 1)
