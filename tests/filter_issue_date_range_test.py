#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Simple Test Demo for Date Filtering Function
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô filter_issue_date_range() ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
"""

import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import functions
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from functions.filter_issue_date_range import filter_issue_date_range

# ===== Test Cases =====

def test_case_1_basic_filtering():
    """Test Case 1: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("\n" + "="*60)
    print("üß™ Test Case 1: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
    print("="*60)
    
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ
    dates_2015 = pd.date_range('2015-01-01', '2015-12-31', freq='3M')  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
    dates_2016_2019 = pd.date_range('2016-01-01', '2019-12-31', freq='3M')  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
    dates_2020 = pd.date_range('2020-01-01', '2020-12-31', freq='3M')  # ‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
    
    all_dates = list(dates_2015) + list(dates_2016_2019) + list(dates_2020)
    
    test_df = pd.DataFrame({
        'issue_d': all_dates,
        'loan_amnt': np.random.randint(1000, 50000, len(all_dates)),
        'loan_id': range(1, len(all_dates) + 1)
    })
    
    print(f"üìä Input Data:")
    print(f"   Total records: {len(test_df)}")
    print(f"   Years in data: {sorted(test_df['issue_d'].dt.year.unique())}")
    print(f"   Expected output: only 2016-2019 (should be {len(dates_2016_2019)} records)")
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    filtered_df = filter_issue_date_range(test_df)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    actual_years = sorted(filtered_df['issue_d'].dt.year.unique())
    expected_count = len(dates_2016_2019)
    actual_count = len(filtered_df)
    
    print(f"\nüìã Test Results:")
    print(f"   Actual records: {actual_count}")
    print(f"   Expected records: {expected_count}")
    print(f"   Years in result: {actual_years}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    if actual_count == expected_count and set(actual_years) <= {2016, 2017, 2018, 2019}:
        print("   ‚úÖ PASS: Basic filtering works correctly")
        return True
    else:
        print("   ‚ùå FAIL: Basic filtering failed")
        return False

def test_case_2_boundary_testing():
    """Test Case 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (Boundary Testing)"""
    print("\n" + "="*60)
    print("üß™ Test Case 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (Boundary Testing)")
    print("="*60)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    boundary_dates = [
        datetime(2015, 12, 31),  # ‚ùå ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡∏µ 2015 - ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
        datetime(2016, 1, 1),    # ‚úÖ ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏õ‡∏µ 2016 - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
        datetime(2019, 12, 31),  # ‚úÖ ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏õ‡∏µ 2019 - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
        datetime(2020, 1, 1)     # ‚ùå ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏õ‡∏µ 2020 - ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
    ]
    
    boundary_df = pd.DataFrame({
        'issue_d': boundary_dates,
        'loan_amnt': [10000, 20000, 30000, 40000],
        'description': ['Last day 2015', 'First day 2016', 'Last day 2019', 'First day 2020']
    })
    
    print(f"üìä Input Data (Boundary Cases):")
    for i, row in boundary_df.iterrows():
        print(f"   {row['description']}: {row['issue_d'].strftime('%Y-%m-%d')}")
    print(f"   Expected output: only 2016-01-01 and 2019-12-31 (2 records)")
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    filtered_df = filter_issue_date_range(boundary_df)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    actual_count = len(filtered_df)
    remaining_dates = filtered_df['issue_d'].dt.strftime('%Y-%m-%d').tolist()
    
    print(f"\nüìã Test Results:")
    print(f"   Actual records: {actual_count}")
    print(f"   Expected records: 2")
    print(f"   Remaining dates: {remaining_dates}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    expected_dates = ['2016-01-01', '2019-12-31']
    if actual_count == 2 and set(remaining_dates) == set(expected_dates):
        print("   ‚úÖ PASS: Boundary testing works correctly")
        return True
    else:
        print("   ‚ùå FAIL: Boundary testing failed")
        return False

def test_case_3_string_format():
    """Test Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• String"""
    print("\n" + "="*60)
    print("üß™ Test Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• String")
    print("="*60)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö string (‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)
    string_dates = [
        'Dec-2015',  # ‚ùå ‡∏õ‡∏µ 2015 - ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
        'Jan-2016',  # ‚úÖ ‡∏õ‡∏µ 2016 - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
        'Jun-2017',  # ‚úÖ ‡∏õ‡∏µ 2017 - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
        'Dec-2019',  # ‚úÖ ‡∏õ‡∏µ 2019 - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
        'Jan-2020'   # ‚ùå ‡∏õ‡∏µ 2020 - ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
    ]
    
    string_df = pd.DataFrame({
        'issue_d': string_dates,
        'loan_amnt': [15000, 25000, 35000, 45000, 55000],
        'status': ['Old', 'Valid', 'Valid', 'Valid', 'New']
    })
    
    print(f"üìä Input Data (String Format):")
    for i, row in string_df.iterrows():
        print(f"   {row['issue_d']} ({row['status']})")
    print(f"   Expected output: Jan-2016, Jun-2017, Dec-2019 (3 records)")
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    filtered_df = filter_issue_date_range(string_df)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    actual_count = len(filtered_df)
    result_dates = filtered_df['issue_d'].dt.strftime('%b-%Y').tolist()
    is_datetime = pd.api.types.is_datetime64_any_dtype(filtered_df['issue_d'])
    
    print(f"\nüìã Test Results:")
    print(f"   Actual records: {actual_count}")
    print(f"   Expected records: 3")
    print(f"   Result dates: {result_dates}")
    print(f"   Converted to datetime: {is_datetime}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    expected_dates = ['Jan-2016', 'Jun-2017', 'Dec-2019']
    if actual_count == 3 and set(result_dates) == set(expected_dates) and is_datetime:
        print("   ‚úÖ PASS: String format handling works correctly")
        return True
    else:
        print("   ‚ùå FAIL: String format handling failed")
        return False

def test_case_4_edge_cases():
    """Test Case 4: Edge Cases"""
    print("\n" + "="*60)
    print("üß™ Test Case 4: Edge Cases")
    print("="*60)
    
    # Test 4a: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 2016-2019
    print("\nüîç Test 4a: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 2016-2019")
    old_dates = pd.date_range('2010-01-01', '2015-12-31', freq='6M')
    old_df = pd.DataFrame({
        'issue_d': old_dates,
        'loan_amnt': np.random.randint(1000, 50000, len(old_dates))
    })
    
    print(f"   Input: {len(old_df)} records from 2010-2015")
    print(f"   Expected output: 0 records")
    
    filtered_old = filter_issue_date_range(old_df)
    
    print(f"   Actual output: {len(filtered_old)} records")
    test_4a_pass = len(filtered_old) == 0
    print(f"   {'‚úÖ PASS' if test_4a_pass else '‚ùå FAIL'}: Empty result handling")
    
    # Test 4b: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå issue_d
    print("\nüîç Test 4b: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå issue_d")
    no_date_df = pd.DataFrame({
        'loan_amnt': [1000, 2000, 3000],
        'other_column': ['A', 'B', 'C']
    })
    
    print(f"   Input: DataFrame without 'issue_d' column")
    print(f"   Expected output: Return original DataFrame unchanged")
    
    result_no_date = filter_issue_date_range(no_date_df)
    
    test_4b_pass = len(result_no_date) == len(no_date_df) and result_no_date.equals(no_date_df)
    print(f"   Actual output: {len(result_no_date)} records (same as input)")
    print(f"   {'‚úÖ PASS' if test_4b_pass else '‚ùå FAIL'}: Missing column handling")
    
    return test_4a_pass and test_4b_pass

def run_all_tests():
    """‡∏£‡∏±‡∏ô Test Cases ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üöÄ Starting Date Filtering Function Tests")
    print("Target: filter_issue_date_range() - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ 2016-2019")
    
    results = []
    
    # ‡∏£‡∏±‡∏ô test cases
    results.append(test_case_1_basic_filtering())
    results.append(test_case_2_boundary_testing()) 
    results.append(test_case_3_string_format())
    results.append(test_case_4_edge_cases())
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("\n" + "="*60)
    print("üìä SUMMARY RESULTS")
    print("="*60)
    
    test_names = [
        "Test Case 1: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
        "Test Case 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï", 
        "Test Case 3: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• String",
        "Test Case 4: Edge Cases"
    ]
    
    passed = 0
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{i+1}. {name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Overall Result: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("üéâ ALL TESTS PASSED! ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° spec")
    else:
        print("‚ö†Ô∏è  SOME TESTS FAILED! ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô")
    
    return passed == len(results)

if __name__ == "__main__":
    # ‡∏£‡∏±‡∏ô tests
    success = run_all_tests()
    
    print(f"\n{'='*60}")
    print("üîö Test Execution Complete")
    print(f"{'='*60}")
    
    exit(0 if success else 1)
